import { ContextEntry } from '@jolocom/protocol-ts'

/* Expanded default context for verifiable credentials, more verbose, but works in offline use cases */

export const defaultContext = [
  {
    id: '@id',
    type: '@type',
    VerifiableCredential:
      'https://www.w3.org/2018/credentials#VerifiableCredential',
    cred: 'https://www.w3.org/2018/credentials#',
    dc: 'http://purl.org/dc/terms/',
    sec: 'https://w3id.org/security#',
    xsd: 'http://www.w3.org/2001/XMLSchema#',
    credentialSchema: 'cred:credentialSchema',
    JsonSchemaValidator2018: 'cred:JsonSchemaValidator2018',
    credentialStatus: 'cred:credentialStatus',
    credentialSubject: 'cred:credentialSubject',
    evidence: 'cred:evidence',
    expirationDate: 'cred:expirationDate',
    holder: 'cred:holder',
    issued: 'cred:issued',
    issuer: 'cred:issuer',
    issuanceDate: 'cred:issuanceDate',
    proof: 'sec:proof',
    refreshService: 'cred:refreshService',
    termsOfUse: 'cred:termsOfUse',
    validFrom: 'cred:validFrom',
    validUntil: 'cred:validUntil',
    VerifiablePresentation:
      'https://www.w3.org/2018/credentials#VerifiablePresentation',
    verifiableCredential: 'cred:verifiableCredential',
    EcdsaSecp256k1Signature2019:
      'https://w3id.org/security#EcdsaSecp256k1Signature2019',
    claim: 'cred:claim',
    challenge: 'sec:challenge',
    created: 'http://purl.org/dc/terms/created',
    domain: 'sec:domain',
    expires: 'sec:expiration',
    jws: 'sec:jws',
    nonce: 'sec:nonce',
    proofPurpose: 'sec:proofPurpose',
    assertionMethod: 'sec:assertionMethod',
    authentication: 'sec:authenticationMethod',
    proofValue: 'sec:proofValue',
    verificationMethod: 'sec:verificationMethod',
    EcdsaSecp256r1Signature2019:
      'https://w3id.org/security#EcdsaSecp256r1Signature2019',
    Ed25519Signature2018: 'https://w3id.org/security#Ed25519Signature2018',
    EcdsaKoblitzSignature2016: 'sec:EcdsaKoblitzSignature2016',
    Credential: 'cred:Credential',
    credential: 'cred:credential',
    creator: 'dc:creator',
    signatureValue: 'sec:signatureValue',
    email: 'schema:email',
    ProofOfEmailCredential:
      'https://identity.jolocom.com/terms/ProofOfEmailCredential',
    ex: 'https://example.org/examples#',
    schema: 'http://schema.org/',
    rdf: 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',

    '3rdPartyCorrelation': 'ex:3rdPartyCorrelation',
    AllVerifiers: 'ex:AllVerifiers',
    Archival: 'ex:Archival',
    BachelorDegree: 'ex:BachelorDegree',
    Child: 'ex:Child',
    CLCredentialDefinition2019: 'ex:CLCredentialDefinition2019',
    CLSignature2019: 'ex:CLSignature2019',
    IssuerPolicy: 'ex:IssuerPolicy',
    HolderPolicy: 'ex:HolderPolicy',
    Mother: 'ex:Mother',
    RelationshipCredential: 'ex:RelationshipCredential',
    UniversityDegreeCredential: 'ex:UniversityDegreeCredential',
    AlumniCredential: 'ex:AlumniCredential',
    DisputeCredential: 'ex:DisputeCredential',
    PrescriptionCredential: 'ex:PrescriptionCredential',
    ZkpExampleSchema2018: 'ex:ZkpExampleSchema2018',

    issuerData: 'ex:issuerData',
    attributes: 'ex:attributes',
    signature: 'ex:signature',
    signatureCorrectnessProof: 'ex:signatureCorrectnessProof',
    primaryProof: 'ex:primaryProof',
    nonRevocationProof: 'ex:nonRevocationProof',

    alumniOf: { '@id': 'schema:alumniOf', '@type': 'rdf:HTML' },
    child: { '@id': 'ex:child', '@type': '@id' },
    degree: 'ex:degree',
    degreeType: 'ex:degreeType',
    degreeSchool: 'ex:degreeSchool',
    college: 'ex:college',
    name: { '@id': 'schema:name', '@type': 'rdf:HTML' },
    givenName: 'schema:givenName',
    familyName: 'schema:familyName',
    parent: { '@id': 'ex:parent', '@type': '@id' },
    referenceId: 'ex:referenceId',
    documentPresence: 'ex:documentPresence',
    evidenceDocument: 'ex:evidenceDocument',
    spouse: 'schema:spouse',
    subjectPresence: 'ex:subjectPresence',
    verifier: { '@id': 'ex:verifier', '@type': '@id' },
    currentStatus: 'ex:currentStatus',
    statusReason: 'ex:statusReason',
    prescription: 'ex:prescription',
    odrl: 'http://www.w3.org/ns/odrl/2/',
    rdfs: 'http://www.w3.org/2000/01/rdf-schema#',
    owl: 'http://www.w3.org/2002/07/owl#',
    skos: 'http://www.w3.org/2004/02/skos/core#',
    dct: 'http://purl.org/dc/terms/',
    vcard: 'http://www.w3.org/2006/vcard/ns#',
    foaf: 'http://xmlns.com/foaf/0.1/',
    cc: 'http://creativecommons.org/ns#',

    uid: '@id',

    Policy: 'odrl:Policy',
    Rule: 'odrl:Rule',
    profile: { '@type': '@id', '@id': 'odrl:profile' },

    inheritFrom: { '@type': '@id', '@id': 'odrl:inheritFrom' },

    ConflictTerm: 'odrl:ConflictTerm',
    conflict: { '@type': '@vocab', '@id': 'odrl:conflict' },
    perm: 'odrl:perm',
    prohibit: 'odrl:prohibit',
    invalid: 'odrl:invalid',

    Agreement: 'odrl:Agreement',
    Assertion: 'odrl:Assertion',
    Offer: 'odrl:Offer',
    Privacy: 'odrl:Privacy',
    Request: 'odrl:Request',
    Set: 'odrl:Set',
    Ticket: 'odrl:Ticket',

    Asset: 'odrl:Asset',
    AssetCollection: 'odrl:AssetCollection',
    relation: { '@type': '@id', '@id': 'odrl:relation' },
    hasPolicy: { '@type': '@id', '@id': 'odrl:hasPolicy' },

    target: { '@type': '@id', '@id': 'odrl:target' },
    output: { '@type': '@id', '@id': 'odrl:output' },

    partOf: { '@type': '@id', '@id': 'odrl:partOf' },
    source: { '@type': '@id', '@id': 'odrl:source' },

    Party: 'odrl:Party',
    PartyCollection: 'odrl:PartyCollection',
    function: { '@type': '@vocab', '@id': 'odrl:function' },
    PartyScope: 'odrl:PartyScope',

    assignee: { '@type': '@id', '@id': 'odrl:assignee' },
    assigner: { '@type': '@id', '@id': 'odrl:assigner' },
    assigneeOf: { '@type': '@id', '@id': 'odrl:assigneeOf' },
    assignerOf: { '@type': '@id', '@id': 'odrl:assignerOf' },
    attributedParty: { '@type': '@id', '@id': 'odrl:attributedParty' },
    attributingParty: { '@type': '@id', '@id': 'odrl:attributingParty' },
    compensatedParty: { '@type': '@id', '@id': 'odrl:compensatedParty' },
    compensatingParty: { '@type': '@id', '@id': 'odrl:compensatingParty' },
    consentingParty: { '@type': '@id', '@id': 'odrl:consentingParty' },
    consentedParty: { '@type': '@id', '@id': 'odrl:consentedParty' },
    informedParty: { '@type': '@id', '@id': 'odrl:informedParty' },
    informingParty: { '@type': '@id', '@id': 'odrl:informingParty' },
    trackingParty: { '@type': '@id', '@id': 'odrl:trackingParty' },
    trackedParty: { '@type': '@id', '@id': 'odrl:trackedParty' },
    contractingParty: { '@type': '@id', '@id': 'odrl:contractingParty' },
    contractedParty: { '@type': '@id', '@id': 'odrl:contractedParty' },

    Action: 'odrl:Action',
    action: { '@type': '@vocab', '@id': 'odrl:action' },
    includedIn: { '@type': '@id', '@id': 'odrl:includedIn' },
    implies: { '@type': '@id', '@id': 'odrl:implies' },

    Permission: 'odrl:Permission',
    permission: { '@type': '@id', '@id': 'odrl:permission' },

    Prohibition: 'odrl:Prohibition',
    prohibition: { '@type': '@id', '@id': 'odrl:prohibition' },

    obligation: { '@type': '@id', '@id': 'odrl:obligation' },

    use: 'odrl:use',
    grantUse: 'odrl:grantUse',
    aggregate: 'odrl:aggregate',
    annotate: 'odrl:annotate',
    anonymize: 'odrl:anonymize',
    archive: 'odrl:archive',
    concurrentUse: 'odrl:concurrentUse',
    derive: 'odrl:derive',
    digitize: 'odrl:digitize',
    display: 'odrl:display',
    distribute: 'odrl:distribute',
    execute: 'odrl:execute',
    extract: 'odrl:extract',
    give: 'odrl:give',
    index: 'odrl:index',
    install: 'odrl:install',
    modify: 'odrl:modify',
    move: 'odrl:move',
    play: 'odrl:play',
    present: 'odrl:present',
    print: 'odrl:print',
    read: 'odrl:read',
    reproduce: 'odrl:reproduce',
    sell: 'odrl:sell',
    stream: 'odrl:stream',
    textToSpeech: 'odrl:textToSpeech',
    transfer: 'odrl:transfer',
    transform: 'odrl:transform',
    translate: 'odrl:translate',

    Duty: 'odrl:Duty',
    duty: { '@type': '@id', '@id': 'odrl:duty' },
    consequence: { '@type': '@id', '@id': 'odrl:consequence' },
    remedy: { '@type': '@id', '@id': 'odrl:remedy' },

    acceptTracking: 'odrl:acceptTracking',
    attribute: 'odrl:attribute',
    compensate: 'odrl:compensate',
    delete: 'odrl:delete',
    ensureExclusivity: 'odrl:ensureExclusivity',
    include: 'odrl:include',
    inform: 'odrl:inform',
    nextPolicy: 'odrl:nextPolicy',
    obtainConsent: 'odrl:obtainConsent',
    reviewPolicy: 'odrl:reviewPolicy',
    uninstall: 'odrl:uninstall',
    watermark: 'odrl:watermark',

    Constraint: 'odrl:Constraint',
    LogicalConstraint: 'odrl:LogicalConstraint',
    constraint: { '@type': '@id', '@id': 'odrl:constraint' },
    refinement: { '@type': '@id', '@id': 'odrl:refinement' },
    Operator: 'odrl:Operator',
    operator: { '@type': '@vocab', '@id': 'odrl:operator' },
    RightOperand: 'odrl:RightOperand',
    rightOperand: 'odrl:rightOperand',
    rightOperandReference: {
      '@type': 'xsd:anyURI',
      '@id': 'odrl:rightOperandReference',
    },
    LeftOperand: 'odrl:LeftOperand',
    leftOperand: { '@type': '@vocab', '@id': 'odrl:leftOperand' },
    unit: 'odrl:unit',
    dataType: { '@type': 'xsd:anyType', '@id': 'odrl:datatype' },
    status: 'odrl:status',

    absolutePosition: 'odrl:absolutePosition',
    absoluteSpatialPosition: 'odrl:absoluteSpatialPosition',
    absoluteTemporalPosition: 'odrl:absoluteTemporalPosition',
    absoluteSize: 'odrl:absoluteSize',
    count: 'odrl:count',
    dateTime: 'odrl:dateTime',
    delayPeriod: 'odrl:delayPeriod',
    deliveryChannel: 'odrl:deliveryChannel',
    elapsedTime: 'odrl:elapsedTime',
    event: 'odrl:event',
    fileFormat: 'odrl:fileFormat',
    industry: 'odrl:industry:',
    language: 'odrl:language',
    media: 'odrl:media',
    meteredTime: 'odrl:meteredTime',
    payAmount: 'odrl:payAmount',
    percentage: 'odrl:percentage',
    product: 'odrl:product',
    purpose: 'odrl:purpose',
    recipient: 'odrl:recipient',
    relativePosition: 'odrl:relativePosition',
    relativeSpatialPosition: 'odrl:relativeSpatialPosition',
    relativeTemporalPosition: 'odrl:relativeTemporalPosition',
    relativeSize: 'odrl:relativeSize',
    resolution: 'odrl:resolution',
    spatial: 'odrl:spatial',
    spatialCoordinates: 'odrl:spatialCoordinates',
    systemDevice: 'odrl:systemDevice',
    timeInterval: 'odrl:timeInterval',
    unitOfCount: 'odrl:unitOfCount',
    version: 'odrl:version',
    virtualLocation: 'odrl:virtualLocation',

    eq: 'odrl:eq',
    gt: 'odrl:gt',
    gteq: 'odrl:gteq',
    lt: 'odrl:lt',
    lteq: 'odrl:lteq',
    neq: 'odrl:neg',
    isA: 'odrl:isA',
    hasPart: 'odrl:hasPart',
    isPartOf: 'odrl:isPartOf',
    isAllOf: 'odrl:isAllOf',
    isAnyOf: 'odrl:isAnyOf',
    isNoneOf: 'odrl:isNoneOf',
    or: 'odrl:or',
    xone: 'odrl:xone',
    and: 'odrl:and',
    andSequence: 'odrl:andSequence',
    policyUsage: 'odrl:policyUsage',

    previousProof: 'https://terms.jolocom.com/previousProof', // TODO Officially register elsewhere
    ChainedProof2021: 'https://terms.jolocom.com/ChainedProof2021', // TODO Officially register elsewhere
    chainSignatureSuite: 'https://terms.jolocom.com/chainSignatureSuite', // TODO Officially register elsewhere
  },
]

/* Expanded default context for did documents, more verbose, but works in offline use cases */

export const defaultContextIdentity: ContextEntry[] = [
  //@ts-ignore, the verson is an int, which is not foreseen by the ContextEntry type
  {
    '@version': 1.1,
    id: '@id',
    type: '@type',
    dc: 'http://purl.org/dc/terms/',
    rdfs: 'http://www.w3.org/2000/01/rdf-schema#',
    schema: 'http://schema.org/',
    sec: 'https://w3id.org/security#',
    didv: 'https://w3id.org/did#',
    xsd: 'http://www.w3.org/2001/XMLSchema#',

    specVersion: 'schema:version',
    AuthenticationSuite: 'sec:AuthenticationSuite',
    CryptographicKey: 'sec:Key',
    EquihashProof2017: 'sec:EquihashProof2017',
    GraphSignature2012: 'sec:GraphSignature2012',
    IssueCredential: 'didv:IssueCredential',
    LinkedDataSignature2015: 'sec:LinkedDataSignature2015',
    LinkedDataSignature2016: 'sec:LinkedDataSignature2016',
    RsaCryptographicKey: 'sec:RsaCryptographicKey',
    RsaSignatureAuthentication2018: 'sec:RsaSignatureAuthentication2018',
    RsaSigningKey2018: 'sec:RsaSigningKey',
    RsaSignature2015: 'sec:RsaSignature2015',
    RsaSignature2017: 'sec:RsaSignature2017',
    UpdateDidDescription: 'didv:UpdateDidDescription',

    authentication: 'sec:authenticationMethod',
    authenticationCredential: 'sec:authenticationCredential',
    authorizationCapability: 'sec:authorizationCapability',
    canonicalizationAlgorithm: 'sec:canonicalizationAlgorithm',
    capability: 'sec:capability',
    comment: 'rdfs:comment',
    controller: { '@id': 'sec:controller', '@type': '@id' },
    created: { '@id': 'dc:created', '@type': 'xsd:dateTime' },
    creator: { '@id': 'dc:creator', '@type': '@id' },
    description: 'schema:description',
    digestAlgorithm: 'sec:digestAlgorithm',
    digestValue: 'sec:digestValue',
    domain: 'sec:domain',
    entity: 'sec:entity',
    equihashParameterAlgorithm: 'sec:equihashParameterAlgorithm',
    equihashParameterK: {
      '@id': 'sec:equihashParameterK',
      '@type': 'xsd:integer',
    },
    equihashParameterN: {
      '@id': 'sec:equihashParameterN',
      '@type': 'xsd:integer',
    },
    expires: { '@id': 'sec:expiration', '@type': 'xsd:dateTime' },
    field: { '@id': 'didv:field', '@type': '@id' },
    label: 'rdfs:label',
    minimumProofsRequired: 'sec:minimumProofsRequired',
    minimumSignaturesRequired: 'sec:minimumSignaturesRequired',
    name: 'schema:name',
    nonce: 'sec:nonce',
    normalizationAlgorithm: 'sec:normalizationAlgorithm',
    owner: { '@id': 'sec:owner', '@type': '@id' },
    permission: 'sec:permission',
    permittedProofType: 'sec:permittedProofType',
    privateKey: { '@id': 'sec:privateKey', '@type': '@id' },
    privateKeyPem: 'sec:privateKeyPem',
    proof: 'sec:proof',
    proofAlgorithm: 'sec:proofAlgorithm',
    proofType: 'sec:proofType',
    proofValue: 'sec:proofValue',
    publicKey: { '@id': 'sec:publicKey', '@type': '@id', '@container': '@set' },
    publicKeyHex: 'sec:publicKeyHex',
    publicKeyPem: 'sec:publicKeyPem',
    requiredProof: 'sec:requiredProof',
    revoked: { '@id': 'sec:revoked', '@type': 'xsd:dateTime' },
    seeAlso: { '@id': 'rdfs:seeAlso', '@type': '@id' },
    service: {
      '@id': 'sec:service-endpoints',
      '@type': '@id',
      '@container': '@set',
    },
    serviceEndpoint: 'sec:dfn-service-endpoints',
    signature: 'sec:signature',
    signatureAlgorithm: 'sec:signatureAlgorithm',
    signatureValue: 'sec:signatureValue',
    updated: { '@id': 'didv:updated', '@type': 'xsd:dateTime' },
  },
]
